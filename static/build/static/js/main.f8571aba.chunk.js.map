{"version":3,"sources":["providers/UserProvider.jsx","components/Navbar.jsx","components/Events.jsx","components/Question.jsx","components/Pagination.jsx","components/Leaderboard.jsx","components/Contactus.jsx","components/Rules.jsx","App.js","serviceWorker.js","index.js"],"names":["UserContext","React","createContext","Navbar","props","state","expanded","this","setState","prev","context","username","sticky","collapseOnSelect","expand","bg","variant","onToggle","toggleNav","bind","to","Brand","Toggle","Collapse","style","float","onClick","className","activeClassName","exact","href","event","preventDefault","UserProvider","Consumer","points","Component","Events","scope","textDecoration","override","css","Question","stuck_open","hint_open","fetching","submitted","question","hint","image","answer","message","answerSubmitHandler","fetch","then","res","json","data","catch","err","console","log","skips","Swal","fire","title","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","isConfirmed","method","headers","csrf","resp","next_question","setSkips","id","onSubmit","skip","disabled","color","FormData","append","target","ans","value","body","status","update_points","footer","Fragment","current_question","fontSize","textAlign","width","height","overflowWrap","WordWrap","hyphens","padding","src","alt","render_hint","onChange","type","placeholder","name","length","button_text","toggle_stuck","render_skip","render_question","contextType","CustomPagination","page","items","i","push","Pagination","Item","active","changePage","key","number_of_pages","Leaderboard","leaderboard","NUMBER_OF_ITEMS","map","topper","index","registration_number","slice","change_page","background","opacity","reloadLeaderboard","render_leaderbord","ContactUs","Rules","listStyleType","textTransform","App","loading","first_name","last_name","email","phone","getCookie","go_to_next_question","cookieValue","document","cookie","cookies","split","trim","substring","decodeURIComponent","response","alert","size","Provider","path","render","Contactus","Boolean","window","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.f8571aba.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst UserContext=React.createContext();\r\n\r\n\r\nexport default UserContext;\r\n","import React, { Component } from 'react';\r\nimport {Navbar as BootstrapNav} from 'react-bootstrap';\r\nimport UserProvider from '../providers/UserProvider'\r\nimport { Link } from 'react-router-dom/cjs/react-router-dom.min';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nexport default class Navbar extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state={\r\n            expanded:false\r\n        }\r\n    }\r\n\r\n    toggleNav()\r\n    {\r\n        this.setState((prev)=>{\r\n            return {expanded:!prev.expanded}\r\n        })\r\n    }\r\n\r\n    renderUsername(context)\r\n    {\r\n        return (\r\n            <span>\r\n                {context.username}\r\n            </span>\r\n        );\r\n    }\r\n    render()\r\n    {\r\n        return(\r\n\r\n            <BootstrapNav sticky=\"top\" collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\" expanded={this.state.expanded} onToggle={()=>this.toggleNav.bind(this)()}>\r\n                <Link to=\"/game/\">\r\n                <BootstrapNav.Brand>ᑌᑎᒪOᑕKᗩTᕼOᑎ </BootstrapNav.Brand>\r\n                </Link>\r\n\r\n                <BootstrapNav.Toggle/>\r\n                \r\n                <BootstrapNav.Collapse  style={{float:'right'}} onClick={()=>this.toggleNav.bind(this)()}>\r\n                    \r\n                        <ul className=\"nav navbar-nav ml-auto navbar-left\">\r\n                        <li className=\"nav-item\">\r\n                            <NavLink activeClassName=\"active\" exact to=\"/game/\" className=\"nav-link\">GAME</NavLink>\r\n                        \r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <NavLink activeClassName=\"active\"  exact to=\"/game/rules\" className=\"nav-link\">RULES</NavLink>\r\n                        \r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <NavLink activeClassName=\"active\"  exact to=\"/game/leaderboard\"  className=\"nav-link\">LEADERBOARD</NavLink>\r\n                        \r\n                        </li>\r\n                        </ul>\r\n                        <ul className=\"nav navbar-nav navbar-right\">\r\n                        <li className=\"nav-item\">\r\n                        <a  href=\"/logout\"  className=\"nav-link\"  >LOGOUT</a>\r\n                        </li>\r\n                    </ul>\r\n                    <ul className=\"nav navbar-nav ml-auto navbar-right\">\r\n                        <li className=\"nav-item\">\r\n                        <a href=\"/\" onClick={(event)=>event.preventDefault()} className=\"nav-link\" >\r\n                            <UserProvider.Consumer>\r\n                                {(context)=><span>YOUR SCORE: {context.points}</span>}\r\n                            </UserProvider.Consumer>\r\n                        </a>\r\n                        </li>\r\n                        {/* <a  href=\"/\" className=\"nav-link blink\" >OTHER EVENTS</a> */}\r\n                        <li className=\"nav-item\">\r\n                        <NavLink activeClassName=\"active\"  exact to=\"/contactus\"  className=\"nav-link\">CONTACT US</NavLink>\r\n                        </li>\r\n                    </ul>\r\n                \r\n           </BootstrapNav.Collapse>\r\n\r\n\r\n            </BootstrapNav>\r\n\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nclass Events extends Component\r\n{\r\n    render()\r\n    {\r\n        return(\r\n            <div className=\"col-lg-4 col-md-4 col-sm-12 col-xs-12\">\r\n            <div className=\"row\">\r\n              <div className=\"col-lg-12 col-md-12 col-lg-12 col-xs-12 table1\" >\r\n                  <h3 className=\"text-center\">Other Events</h3>\r\n                  \r\n                      <table className=\"table\">\r\n                          <thead className=\"thead-dark\">\r\n                              <tr>\r\n                                    <th scope=\"col\">Event</th>\r\n                                    <th scope=\"col\">Relevant Links</th>\r\n                              </tr>\r\n                            </thead>\r\n\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>Crown Jewel</td>\r\n                                    <td><a href=\"https://crownjewel.istemanipal.com/\">Registration Link</a></td>\r\n                                </tr>\r\n                                <tr className=\"pure-table-odd\">\r\n                                    <td>Oasis</td>\r\n                                    <td><a href=\"https://forms.gle/otG3TKiK1X1vLiL68\">Registration Link</a></td>\r\n                                </tr>\r\n                                <tr className=\"pure-table-odd\">\r\n                                    <td>Talk by Mr.Sunil Varkey</td>\r\n                                    <td><a href=\"https://forms.gle/BSeitmHQkE2bfXe2A\">MS Teams, 4th March 6pm</a></td>\r\n                                </tr>\r\n                                <tr className=\"pure-table-odd\">\r\n                                    <td>Talk by Mr.Khushhal Kaushik</td>\r\n                                    <td><a href=\"https://forms.gle/iELZ4YqCnTXpx2Hg6\" style={{textDecoration:'none'}}>MS Teams, 7th March 12pm</a></td>\r\n                                </tr>\r\n                            </tbody>\r\n\r\n                      </table>\r\n                  \r\n              </div>\r\n             </div>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Events;","import React, { Component } from 'react'\r\nimport Events from './Events';\r\nimport UserProvider from '../providers/UserProvider'\r\nimport PulseLoader from 'react-spinners/PulseLoader';\r\n\r\n\r\nimport { css } from \"@emotion/core\";\r\nimport Swal from 'sweetalert2';\r\n\r\n\r\nconst override = css`\r\n  display: block;\r\n  text-align: center;\r\n  border-color: red;\r\n  margin-top:25px;\r\n`;\r\n\r\n\r\n\r\n\r\nexport default class Question extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state={\r\n            stuck_open:false,\r\n            hint_open:false,\r\n            fetching:true,\r\n            submitted:false,\r\n            question:'',\r\n            hint:'',\r\n            image:'',\r\n            answer:'',\r\n            message:'',\r\n        }\r\n\r\n        this.answerSubmitHandler=this.answerSubmitHandler.bind(this);\r\n        \r\n    }\r\n\r\n    componentDidMount()\r\n    {\r\n        fetch(`/api/get_question`)\r\n        .then((res)=>res.json())\r\n        .then((data)=>{\r\n            if(data.question)\r\n            {\r\n                this.setState({\r\n                    question:data.question.question,\r\n                    hint:data.question.hint,\r\n                    image:data.question.image,\r\n                    fetching:false\r\n                })\r\n            }\r\n            else\r\n            {\r\n\r\n                this.setState({\r\n                    question:null,\r\n                    hint:null,\r\n                    image:null,\r\n                    message:data.message,\r\n                    fetching:false\r\n                })\r\n\r\n            }\r\n        })\r\n        .catch((err)=>console.log(err));\r\n    }\r\n\r\n    toggle_stuck()\r\n    {\r\n        this.setState((prev)=>{\r\n            return {\r\n                stuck_open:!prev.stuck_open\r\n            }\r\n        })\r\n    }\r\n\r\n    skip()\r\n    {\r\n        if(this.context.skips>0)\r\n        {    Swal.fire({\r\n                title: 'Are you sure you want to skip this question ?',\r\n                text: \"You won't get any points for if you do so!\",\r\n                icon: 'warning',\r\n                showCancelButton: true,\r\n                confirmButtonColor: '#3085d6',\r\n                cancelButtonColor: '#d33',\r\n                confirmButtonText: 'Yes'\r\n            })\r\n            .then((res)=>{\r\n                if(res.isConfirmed)\r\n                {\r\n                    fetch('/api/skip',{\r\n                        method:'POST',\r\n                        headers:{'X-CSRFToken':this.context.csrf}\r\n                    })\r\n                    .then((resp)=>resp.json())\r\n                    .then((data)=>{\r\n                        if(data.next_question)\r\n                        {\r\n                            let question=data.next_question;\r\n                            this.setState({\r\n                                question:question.question,\r\n                                hint:question.hint,\r\n                                image:question.image\r\n            \r\n                            },()=>{\r\n                                this.context.setSkips(data.skips);\r\n                                this.context.next_question();\r\n                            })\r\n            \r\n            \r\n                        }\r\n            \r\n                        else\r\n                        {\r\n                            console.log(data);\r\n                            this.setState({\r\n                                question:null,\r\n                                hint:null,\r\n                                image:null,\r\n                                message:data.message\r\n                            },()=>{\r\n                                this.context.setSkips(data.skips);\r\n                                this.context.next_question();\r\n                            })\r\n                        }\r\n                    })\r\n\r\n                }\r\n            });\r\n        }\r\n\r\n        else\r\n        {\r\n            Swal.fire({\r\n                title:'Oops, You do not have enough skips remaining!',\r\n                icon:'error'\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n        \r\n\r\n        render_skip()\r\n        {\r\n                if (this.state.stuck_open)\r\n                {\r\n                    return (\r\n                        <form id=\"skip_form\" onSubmit={(event)=>event.preventDefault()}>\r\n                                {/* {%csrf_token%} */}\r\n                    \r\n                        \r\n                            <button className=\"btn btn-danger\" onClick={()=>this.skip()} disabled={this.state.submitted || this.context.skips===0}>\r\n                                \r\n                            <span>{this.context.skips} skips remaining</span>\r\n                            \r\n                            </button>\r\n                        \r\n                        \r\n                        </form>\r\n                    );\r\n                }\r\n                else{\r\n                    return(\r\n                        <div>\r\n                        \r\n                        </div>\r\n                    );\r\n                }\r\n    }\r\n\r\n    render_hint()\r\n    {\r\n        if(this.state.hint_open)\r\n        {\r\n            return(\r\n                <div id=\"hint\" >\r\n                    <h4 style={{color: 'black'}}>{this.state.hint}</h4>\r\n                    <br />  \r\n                </div>\r\n            );\r\n        }\r\n\r\n        else\r\n        {\r\n            return(\r\n                <div></div>\r\n            );\r\n        }\r\n    }\r\n\r\n    answerSubmitHandler(event)\r\n    {\r\n        event.preventDefault();\r\n        this.setState({submitted:true});\r\n        let data=new FormData();\r\n\r\n        data.append('answer',event.target.ans.value);\r\n\r\n        fetch('/api/check_answer',{\r\n            method:'POST',\r\n            body:data,\r\n            headers:{'X-CSRFToken':this.context.csrf}\r\n        })\r\n        .then((res)=>res.json())\r\n        .then((data)=>{\r\n            if(data.status==='correct')\r\n            {\r\n                \r\n                \r\n                Swal.fire({\r\n                    title:'Correct Answer!',\r\n                    icon:'success',\r\n\r\n                })\r\n                .then(()=>{\r\n                    if(data.next_question!=null)\r\n                    {\r\n                        this.context.next_question();\r\n                        this.context.update_points(data.points);\r\n\r\n                        this.setState({\r\n                            question:data.next_question.question,\r\n                            hint:data.next_question.hint,\r\n                            image:data.next_question.image,\r\n                            answer:'',\r\n                            submitted:false\r\n                        })\r\n                    }\r\n\r\n                    else\r\n                    {\r\n                        this.context.next_question();\r\n                        this.context.update_points(data.points);\r\n\r\n                        this.setState({\r\n                            question:null,\r\n                            hint:null,\r\n                            image:null,\r\n                            answer:null,\r\n                            message:data.message,\r\n                            submitted:false\r\n                        })\r\n                    \r\n                    }\r\n\r\n                })\r\n                \r\n                \r\n            }\r\n            else if(data.status==='wrong')\r\n            {\r\n                Swal.fire({\r\n                    title:'Wrong Answer!',\r\n                    icon:'error',\r\n                })\r\n                this.setState({submitted:false});\r\n            }\r\n            else\r\n            {\r\n                Swal.fire({\r\n                    title:data.status,\r\n                    icon:'warning',\r\n                    footer:'Please contact the organizers to report the error'\r\n                })\r\n            }\r\n        })\r\n        .catch((err)=>console.log(err));\r\n\r\n    }\r\n\r\n    button_text()\r\n    {\r\n    \r\n            if(this.state.submitted) return (<span>CHECKING</span>);\r\n            else return (<span>SUBMIT</span>);\r\n    }\r\n\r\n    render_question()\r\n    {\r\n        if(!this.state.fetching)\r\n        {\r\n            if(this.state.question)\r\n            {    \r\n                return(\r\n                    <React.Fragment>\r\n                    <div className=\"question\">\r\n                    <h2>Level {this.context.current_question} </h2>\r\n                    <p style={{fontSize: '22px', textAlign: 'center', width: '100%', height: '20%', overflowWrap: 'break-word',WordWrap: 'break-word', hyphens: 'auto', padding: '10px'}}>{this.state.question}</p>\r\n                    <br/>\r\n                    \r\n                    <img src={this.state.image} height='300' width='400' alt=''/>\r\n                        \r\n                                                \r\n                    </div>\r\n                    <center>\r\n                                    \r\n                    <button className=\"button mt-2\" onClick={()=>this.setState({hint_open:!this.state.hint_open})}>HINT</button>\r\n                    {this.render_hint.bind(this)()}\r\n                    \r\n                    </center>\r\n                    <div className=\"answer\">\r\n                            <div className=\"ans\">\r\n                                <h2>Answer</h2>\r\n                            </div>\r\n                            <form method=\"POST\" id=\"answer_form\" onSubmit={this.answerSubmitHandler}>\r\n                                    \r\n                                    <div className=\"form-group field col-lg-12\">\r\n                                    <input onChange={(event)=>this.setState({answer:event.target.value})} value={this.state.answer} type=\"text\" className=\"form-control\" id=\"answer\" placeholder=\"Enter Answer\" name=\"ans\"/>\r\n                                </div>\r\n                                <button  disabled={this.state.answer.length===0 || this.state.submitted} className=\"btn btn-info\" type=\"submit\" name=\"submit\" value=\"SUBMIT\">{this.button_text.bind(this)()}</button>\r\n                            </form>\r\n                                            \r\n                                    {/* <!-- <button type=\"submit\" className=\"btn btn-default\" ><b>Submit</b></button> --> */}\r\n                    </div>\r\n                    <center>\r\n                        <p className=\"btn btn-primary mt-2\" onClick={()=>this.toggle_stuck.bind(this)()}>Stuck?</p>\r\n                        {this.render_skip.bind(this)()}\r\n                    </center>\r\n                    </React.Fragment>\r\n            \r\n                );\r\n            }\r\n\r\n            else\r\n            {\r\n                return(\r\n                    <div className=\"question\">\r\n                        <h2>{this.state.message}</h2>\r\n                        <br/>\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        else\r\n        {\r\n            return (\r\n                <div>\r\n                    <PulseLoader css={override}/>\r\n\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n    render()\r\n    {\r\n        return(\r\n                <div id=\"main\">\r\n                <div className=\"container-fluid\">\r\n                    <div className=\"row row1\">\r\n                        {/* <!-- <div className=\"col-lg-2 col-md-2\"></div> --> */}\r\n                        <div className=\"col-lg-7 col-md-7 col-sm-12 col-xs-12\">\r\n                        <div className=\"question-back\" >\r\n                            {this.render_question.bind(this)()}\r\n                        </div>\r\n                           \r\n                        </div>\r\n                    <div className=\"col-lg-1 col-md-1\"></div> \r\n                        <Events/>\r\n                \r\n                            \r\n                    </div>\r\n                </div>    \r\n            </div>\r\n            );\r\n\r\n    }\r\n}\r\n\r\nQuestion.contextType=UserProvider;","import React, { Component } from 'react';\r\nimport Pagination from 'react-bootstrap/Pagination'\r\n\r\nexport default class CustomPagination extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state={\r\n            page:this.props.page\r\n        }\r\n    }\r\n\r\n\r\n    render()\r\n    {\r\n        let items=[];\r\n        for(let i=1;i<=this.props.number_of_pages;i++)\r\n        {\r\n            items.push(\r\n            <Pagination.Item active = {i===this.props.page} onClick={()=>this.props.changePage(i)} key={i}>\r\n                {i}\r\n            </Pagination.Item>)\r\n        }\r\n\r\n\r\n        return(\r\n            <Pagination className=\"justify-content-center\">\r\n                {items}\r\n            </Pagination>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport UserProvider from '../providers/UserProvider'\r\n\r\nimport PulseLoader from 'react-spinners/PulseLoader';\r\nimport { css } from \"@emotion/core\";\r\n\r\nimport CustomPagination from './Pagination';\r\n\r\n\r\nconst override = css`\r\n  display: block;\r\n  text-align: center;\r\n  border-color: red;\r\n  background: linear-gradient(308deg,#d34020,#3b2ee7);\r\n  margin-top:25px;\r\n`;\r\n\r\nexport default class Leaderboard extends Component\r\n{\r\n\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state={\r\n            fetching:true,\r\n            leaderboard:[],\r\n            page:1\r\n        }\r\n        this.NUMBER_OF_ITEMS=10;\r\n    }\r\n\r\n    componentDidMount()\r\n    {\r\n        fetch('/api/leaderboard')\r\n        .then((res)=>res.json())\r\n        .then((data)=>{\r\n            this.setState({\r\n                leaderboard:data.leaderboard,\r\n                fetching:false\r\n            })\r\n        })\r\n        .catch((err)=>console.log(err));\r\n        \r\n\r\n    }\r\n\r\n    change_page(page)\r\n    {\r\n        this.setState({page:page})\r\n    }\r\n\r\n    render_leaderbord()\r\n    {\r\n        if(this.state.fetching)\r\n        {\r\n            return(\r\n                <PulseLoader css={override}/>\r\n            );\r\n        }\r\n\r\n        else\r\n        {\r\n            let leaderboard=this.state.leaderboard.map((topper,index)=>{\r\n                if (topper.registration_number!==this.context.registration_number)\r\n                {\r\n                    return(\r\n                        <tr key={index}>\r\n                            <td>{index+1}</td>\r\n                            {/* <td>{topper.first_name} {topper.last_name}</td> */}\r\n                            <td>{topper.registration_number}</td>\r\n                            <td>{topper.points}</td>\r\n                        </tr>\r\n                    );\r\n                }\r\n                else\r\n                {\r\n                    \r\n                    return(\r\n                        <tr className=\"table-danger\" key={index}>\r\n                            <td>{index+1}</td>\r\n                            {/* <td>{topper.first_name} {topper.last_name}</td> */}\r\n                            <td>{topper.registration_number}</td>\r\n                            <td>{topper.points}</td>\r\n                        </tr>\r\n                    );\r\n                }\r\n            });\r\n\r\n            leaderboard=leaderboard.slice((this.state.page-1)*this.NUMBER_OF_ITEMS,(this.state.page-1)*this.NUMBER_OF_ITEMS+this.NUMBER_OF_ITEMS);\r\n\r\n            return(\r\n                <div className=\"table-responsive\">\r\n                <table className=\"table\">\r\n                    \r\n                    <thead className=\"thead1\">\r\n                              <tr className=\"tableHeader\">\r\n                                    <th scope=\"col\">Rank</th>\r\n                                    {/* <th scope=\"col\">Name</th> */}\r\n                                    <th scope=\"col\">Registration Number</th>\r\n                                    <th scope=\"col\">Points</th>\r\n                              </tr>\r\n                    </thead>\r\n\r\n                    <tbody>\r\n                        {leaderboard}\r\n                    </tbody>\r\n                    \r\n                </table>\r\n                <div className=\"text-center\">\r\n                                <CustomPagination changePage={this.change_page.bind(this)} page={this.state.page} number_of_pages={this.state.leaderboard.length/this.NUMBER_OF_ITEMS}/>\r\n                            </div>\r\n                \r\n                </div>\r\n\r\n            );\r\n\r\n        }\r\n    }\r\n\r\n    reloadLeaderboard()\r\n    {\r\n        \r\n        this.setState({\r\n            fetching:true,\r\n            leaderboard:[]\r\n        },()=>{\r\n            fetch('/api/leaderboard')\r\n            .then((res)=>res.json())\r\n            .then((data)=>{\r\n                this.setState({\r\n                    leaderboard:data.leaderboard,\r\n                    fetching:false\r\n                });\r\n\r\n                \r\n\r\n\r\n\r\n                \r\n            })\r\n            .catch((err)=>console.log(err));\r\n        })\r\n    }\r\n\r\n\r\n    render()\r\n    {\r\n        return(\r\n            <div id=\"main\" className=\"mt-4\">\r\n                <div className=\"container\" style={{background: 'rgba(0, 0, 0, 0.61)', opacity: '0.9',color: 'white'}}>\r\n                    <div className=\"row\">\r\n                        {/* <!-- <div className=\"col-lg-2 col-md-2\"></div> --> */}\r\n                        <div className=\"col-12 text-center\">\r\n                        <div className=\"question-back1 text-center\" >\r\n                            <button className=\"btn btn-primary float-right\" onClick={()=>this.reloadLeaderboard()}><span>&#8634;</span></button>\r\n                            {this.render_leaderbord.bind(this)()}\r\n                            \r\n                        </div>\r\n                        \r\n                           \r\n                        </div>\r\n                        \r\n                            \r\n                    </div>\r\n                    \r\n                           \r\n                  \r\n                </div>\r\n                    \r\n            </div>\r\n        )\r\n    }\r\n}\r\nLeaderboard.contextType=UserProvider;","import React from 'react';\r\n\r\n\r\nconst ContactUs = ()=>\r\n{\r\n   \r\n        return(\r\n\r\n            <div id=\"main\" className=\"mt-4\">\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                   \r\n                    <div className=\"col-12 text-center\">\r\n                    <div className=\"question-back text-center\" >\r\n                    <div className=\"table-responsive\">\r\n                    <table className=\"table\">\r\n                    \r\n                        <thead className=\"thead-dark\">\r\n                              <tr>\r\n                                    <th scope=\"col\">Name</th>\r\n                                    {/* <th scope=\"col\">Name</th> */}\r\n                                    <th scope=\"col\">Contact Number</th>\r\n                                   \r\n                              </tr>\r\n                        </thead>\r\n\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>Ronak Pradhan</td>\r\n                                <td><a className=\"btn btn-info\" href=\"https://api.WhatsApp.com/send?phone=+918342877713\">WhatsApp (8342877713)</a></td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td>Bhakti Manakapure</td>\r\n                                <td><a className=\"btn btn-info\" href=\"https://api.WhatsApp.com/send?phone=+918178006463\">WhatsApp (8178006463)</a></td>\r\n                            </tr>\r\n                            \r\n                        </tbody>\r\n                    \r\n                    </table>\r\n                \r\n                    </div>\r\n                        \r\n                        \r\n                    </div>\r\n                    \r\n                       \r\n                    </div>\r\n                    \r\n                        \r\n                </div>\r\n                \r\n                       \r\n              \r\n            </div>\r\n                \r\n        </div>\r\n\r\n        );\r\n\r\n}\r\n\r\nexport default ContactUs;","import React from 'react';\r\n\r\n\r\nconst Rules =()=>{\r\n\r\n    return(\r\n        <div id=\"main\" className=\"mt-4\">\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                   \r\n                    <div className=\"col-12 text-center\">\r\n                        <div className=\"question-back text-center\" >\r\n                            <div className=\"table-responsive\">\r\n\r\n                            <ul style={{listStyleType:'upper-roman', color:'white', textTransform:'capitalize!important'}}>\r\n\t\t\t\t\t\t\t\t\t\t\t<li>THE QUESTIONS DISPLAYED REVOLVE AROUND THE STORY WHICH IS BASED IN MANIPAL.</li>\r\n\t\t\t\t\t\t\t\t\t\t\t<li>UNLOCK NEW PARTS OF THE STORY WITH EACH CORRECT ANSWER</li>\r\n                                            <li>YOU WILL HAVE TO TYPE THE ANSWERS SO MAKE SURE THERE ARE NO ERRORS IN THE SPELLINGS\r\n                                            </li>\r\n                                            <li>YOU WILL BE PROVIDED WITH HINTS FOR SOME OF THE QUESTIONS TO HELP YOU IN YOUR JOURNEY</li>\r\n\t\t\t\t\t\t\t\t\t\t\t <li>YOU HAVE AN UNLIMITED NUMBER OF TRIES FOR EACH QUESTION</li>\r\n\t\t\t\t\t\t\t\t\t\t\t <li>YOU WILL BE PROVIDED WITH 3 SKIPS EVERYDAY. YOU WONT GET ANY POINTS FOR THE QUESTIONS YOU SKIP.</li> \r\n\t\t\t\t\t\t\t\t\t\t\t <li>THE ORDER OF QUESTIONS APPEARING FOR EACH PLAYER IS SAME</li> \r\n\t\t\t\t\t\t\t\t\t\t\t <li>THE EVENT WILL BE LIVE TILL SUNDAY 4TH MARCH NIGHT. WINNERS WILL BE CONTACTED ON THEIR CONTACT DETAILS PROVIDED.</li></ul>\r\n                                \r\n                            </div>\r\n                            \r\n                            \r\n                        </div>\r\n                        \r\n                       \r\n                    </div>\r\n                    \r\n                        \r\n                </div>\r\n                \r\n                       \r\n              \r\n            </div>\r\n                \r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Rules;","import React, { Component } from 'react';\r\nimport PuffLoader from 'react-spinners/PuffLoader';\r\nimport { css } from \"@emotion/core\";\r\nimport {Switch,Route} from 'react-router-dom'\r\n\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './assets/css/home.css';\r\nimport './assets/others.css'\r\n\r\nimport Navbar from './components/Navbar'\r\nimport Question from './components/Question';\r\nimport Leaderboard from './components/Leaderboard'\r\nimport Contactus from './components/Contactus';\r\nimport Rules from './components/Rules';\r\n\r\nimport UserProvider from './providers/UserProvider';\r\nimport { Redirect } from 'react-router-dom/cjs/react-router-dom.min';\r\n\r\n\r\n\r\n\r\n\r\nexport default class App extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state={\r\n            loading:true,\r\n            first_name:'',\r\n            last_name:'',\r\n            registration_number:'',\r\n            email:'',\r\n            phone:'',\r\n            points:'',\r\n            current_question:'',\r\n            skips:'',\r\n            csrf:this.getCookie('csrftoken')\r\n\r\n        }\r\n\r\n        this.go_to_next_question=this.go_to_next_question.bind(this);\r\n        this.update_points=this.update_points.bind(this);\r\n        this.setSkips=this.setSkips.bind(this);\r\n    }\r\n\r\n    getCookie(name) {\r\n        let cookieValue = null;\r\n        if (document.cookie && document.cookie !== '') {\r\n            const cookies = document.cookie.split(';');\r\n            for (let i = 0; i < cookies.length; i++) {\r\n                const cookie = cookies[i].trim();\r\n                // Does this cookie string begin with the name we want?\r\n                if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return cookieValue;\r\n    }\r\n\r\n    componentDidMount()\r\n    {\r\n        fetch('/api/get_logged_in_user')\r\n        .then((response)=>response.json())\r\n        .then((json)=>{\r\n            this.setState({\r\n                first_name:json.first_name,\r\n                last_name:json.last_name,\r\n                registration_number:json.registration_number,\r\n                email:json.email,\r\n                phone:json.phone,\r\n                points:json.points,\r\n                current_question:json.current_question,\r\n                skips:json.skips,\r\n                loading:false,\r\n                next_question:this.go_to_next_question,\r\n                update_points:this.update_points,\r\n                setSkips:this.setSkips\r\n\r\n            })\r\n        })\r\n        .catch((err)=>alert(err))\r\n    }\r\n\r\n    go_to_next_question()\r\n    {\r\n        this.setState((prev)=>{\r\n            return{\r\n                current_question:prev.current_question+1\r\n            }\r\n        })\r\n    }\r\n\r\n    update_points(points)\r\n    {\r\n        this.setState({points:points});\r\n    }\r\n\r\n    setSkips(skips)\r\n    {\r\n        this.setState({skips:skips});\r\n    }\r\n\r\n\r\n\r\n    render()\r\n    {\r\n        const override = css`\r\n        position: fixed;\r\n        z-index: 999;\r\n        height: 2em;\r\n        width: 2em;\r\n        overflow: visible;\r\n        margin: auto;\r\n        top: 0;\r\n        left: 0;\r\n        bottom: 0;\r\n        right: 0;\r\n`;\r\n        if (!this.state.loading){\r\n            return(\r\n                    <UserProvider.Provider value={this.state}>\r\n                        <Navbar/>\r\n                        <Switch>\r\n                            <Route exact path=\"/game/\" render={(props)=><Question {...props}/>}/>\r\n                            <Route exact path=\"/game/leaderboard\" render={(props)=><Leaderboard {...props}/>} />\r\n                            <Route exact path=\"/contactus\" render={(props)=> <Contactus/>}/>\r\n                            <Route exact path=\"/game/rules\" render={()=><Rules/>}/>\r\n                            <Redirect to=\"/game/\"/>\r\n                        </Switch>\r\n                    </UserProvider.Provider> \r\n                    \r\n            );\r\n        }\r\n\r\n        return(\r\n            \r\n          <div css={override}>\r\n            <PuffLoader css={override}\r\n          size={100}\r\n          color={\"white\"}/>\r\n          </div>\r\n\r\n        );\r\n    }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {BrowserRouter} from 'react-router-dom'\r\n\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}